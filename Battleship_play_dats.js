/*
**
** The JavaScript code is generated by atscc2js
** The starting compilation time is: 2016-12-10: 12h:52m
**
*/

function
Battleship__patsfun_15__closurerize(env0, env1)
{
  return [function(cenv, arg0, arg1) { return Battleship__patsfun_15(cenv[1], cenv[2], arg0, arg1); }, env0, env1];
}


function
Battleship__patsfun_16__closurerize(env0, env1)
{
  return [function(cenv, arg0, arg1) { return Battleship__patsfun_16(cenv[1], cenv[2], arg0, arg1); }, env0, env1];
}


function
Battleship__patsfun_18__closurerize(env0)
{
  return [function(cenv, arg0) { return Battleship__patsfun_18(cenv[1], arg0); }, env0];
}


function
Battleship__patsfun_19__closurerize(env0, env1, env2)
{
  return [function(cenv, arg0) { return Battleship__patsfun_19(cenv[1], cenv[2], cenv[3], arg0); }, env0, env1, env2];
}


function
Battleship__patsfun_20__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return Battleship__patsfun_20(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
Battleship__patsfun_21__closurerize(env0)
{
  return [function(cenv, arg0) { return Battleship__patsfun_21(cenv[1], arg0); }, env0];
}


function
Battleship__patsfun_22__closurerize()
{
  return [function(cenv, arg0) { return Battleship__patsfun_22(arg0); }];
}


function
Battleship__patsfun_23__closurerize(env0)
{
  return [function(cenv, arg0) { return Battleship__patsfun_23(cenv[1], arg0); }, env0];
}


function
Battleship__patsfun_24__closurerize(env0, env1, env2)
{
  return [function(cenv, arg0) { return Battleship__patsfun_24(cenv[1], cenv[2], cenv[3], arg0); }, env0, env1, env2];
}


function
Battleship__patsfun_25__closurerize(env0, env1)
{
  return [function(cenv, arg0) { return Battleship__patsfun_25(cenv[1], cenv[2], arg0); }, env0, env1];
}


function
Battleship__patsfun_26__closurerize(env0)
{
  return [function(cenv, arg0) { return Battleship__patsfun_26(cenv[1], arg0); }, env0];
}


function
Battleship__patsfun_27__closurerize()
{
  return [function(cenv, arg0) { return Battleship__patsfun_27(arg0); }];
}


function
ownBoard_init()
{
//
// knd = 0
  var tmpret0
  var tmp1
  var tmplab, tmplab_js
//
  // __patsflab_ownBoard_init
  tmp1 = null;
  tmpret0 = ats2jspre_mtrxszref_make_elt(8, 8, tmp1);
  return tmpret0;
} // end-of-function


function
attackBoard_init()
{
//
// knd = 0
  var tmpret2
  var tmp3
  var tmplab, tmplab_js
//
  // __patsflab_attackBoard_init
  tmp3 = null;
  tmpret2 = ats2jspre_mtrxszref_make_elt(8, 8, tmp3);
  return tmpret2;
} // end-of-function


function
player_human_init()
{
//
// knd = 0
  var tmpret4
  var tmp5
  var tmp6
  var tmplab, tmplab_js
//
  // __patsflab_player_human_init
  tmp5 = ownBoard_init();
  tmp6 = attackBoard_init();
  tmpret4 = [tmp5, tmp6, false];
  return tmpret4;
} // end-of-function


function
player_cpu_init()
{
//
// knd = 0
  var tmpret7
  var tmp8
  var tmp9
  var tmplab, tmplab_js
//
  // __patsflab_player_cpu_init
  tmp8 = ownBoard_init();
  tmp9 = attackBoard_init();
  tmpret7 = [tmp8, tmp9, true];
  return tmpret7;
} // end-of-function


function
ownBoard_get(arg0)
{
//
// knd = 0
  var tmpret10
  var tmp11
  var tmplab, tmplab_js
//
  // __patsflab_ownBoard_get
  tmp11 = arg0[0];
  tmpret10 = tmp11;
  return tmpret10;
} // end-of-function


function
attackBoard_get(arg0)
{
//
// knd = 0
  var tmpret12
  var tmp13
  var tmplab, tmplab_js
//
  // __patsflab_attackBoard_get
  tmp13 = arg0[1];
  tmpret12 = tmp13;
  return tmpret12;
} // end-of-function


function
ownBoard_addShips(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
{
//
// knd = 0
  var tmp15
  var tmplab, tmplab_js
//
  // __patsflab_ownBoard_addShips
  tmp15 = ownBoard_get(arg0);
  Battleship__addShip_7(tmp15, arg1);
  Battleship__addShip_7(tmp15, arg2);
  Battleship__addShip_7(tmp15, arg3);
  Battleship__addShip_7(tmp15, arg4);
  Battleship__addShip_7(tmp15, arg5);
  Battleship__addShip_7(tmp15, arg6);
  Battleship__addShip_7(tmp15, arg7);
  Battleship__addShip_7(tmp15, arg8);
  Battleship__addShip_7(tmp15, arg9);
  Battleship__addShip_7(tmp15, arg10);
  return/*_void*/;
} // end-of-function


function
Battleship__addShip_7(env0, arg0)
{
//
// knd = 0
  var tmp17
  var tmp18
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__addShip_7
  tmp17 = arg0[0];
  tmp18 = arg0[1];
  Battleship__aux_8(env0, tmp17, tmp18);
  return/*_void*/;
} // end-of-function


function
Battleship__aux_8(env0, arg0, arg1)
{
//
// knd = 1
  var apy0
  var apy1
  var tmp20
  var tmp21
  var tmp22
  var tmp23
  var tmp24
  var tmp25
  var tmp26
  var tmp27
  var tmp28
  var tmp29
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_Battleship__aux_8
    tmp20 = ats2jspre_mtrxszref_get_at(env0, arg0, arg1);
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab0
        if(ATSCKptriscons(tmp20)) { tmplab_js = 4; break; }
        case 2: // __atstmplab1
        tmp21 = [1];
        ats2jspre_mtrxszref_set_at(env0, arg0, arg1, tmp21);
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab2
        case 4: // __atstmplab3
        tmp25 = ats2jspre_JSmath_random();
        tmp24 = ats2jspre_mul_double_double(tmp25, 0.999999);
        tmp23 = ats2jspre_mul_double_int(tmp24, 8);
        tmp22 = ats2jspre_double2int(tmp23);
        tmp29 = ats2jspre_JSmath_random();
        tmp28 = ats2jspre_mul_double_double(tmp29, 0.999999);
        tmp27 = ats2jspre_mul_double_int(tmp28, 8);
        tmp26 = ats2jspre_double2int(tmp27);
        // ATStailcalseq_beg
        apy0 = tmp22;
        apy1 = tmp26;
        arg0 = apy0;
        arg1 = apy1;
        funlab_js = 1; // __patsflab_Battleship__aux_8
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return/*_void*/;
  } // endwhile-fun
} // end-of-function


function
generate_randShip()
{
//
// knd = 0
  var tmpret39
  var tmp40
  var tmp41
  var tmp42
  var tmp43
  var tmp44
  var tmp45
  var tmp46
  var tmp47
  var tmplab, tmplab_js
//
  // __patsflab_generate_randShip
  tmp43 = ats2jspre_JSmath_random();
  tmp42 = ats2jspre_mul_double_double(tmp43, 0.999999);
  tmp41 = ats2jspre_mul_double_int(tmp42, 8);
  tmp40 = ats2jspre_double2int(tmp41);
  tmp47 = ats2jspre_JSmath_random();
  tmp46 = ats2jspre_mul_double_double(tmp47, 0.999999);
  tmp45 = ats2jspre_mul_double_int(tmp46, 8);
  tmp44 = ats2jspre_double2int(tmp45);
  tmpret39 = [tmp40, tmp44];
  return tmpret39;
} // end-of-function


function
attack(arg0, arg1, arg2, arg3)
{
//
// knd = 0
  var tmpret48
  var tmp49
  var tmp50
  var tmplab, tmplab_js
//
  // __patsflab_attack
  tmp49 = arg0[1];
  tmp50 = arg1[0];
  tmpret48 = bomb_node(tmp50, tmp49, arg2, arg3);
  return tmpret48;
} // end-of-function


function
bomb_node(arg0, arg1, arg2, arg3)
{
//
// knd = 0
  var tmpret51
  var tmp52
  var tmp53
  var tmp54
  var tmp55
  var tmp56
  var tmp57
  var tmp59
  var tmp61
  var tmp62
  var tmp64
  var tmp66
  var tmplab, tmplab_js
//
  // __patsflab_bomb_node
  tmp54 = ats2jspre_lt_int1_int1(arg2, 8);
  if(tmp54) {
    tmp53 = ats2jspre_gte_int1_int1(arg2, 0);
  } else {
    tmp53 = false;
  } // endif
  if(tmp53) {
    tmp55 = ats2jspre_lt_int1_int1(arg3, 8);
    if(tmp55) {
      tmp52 = ats2jspre_gte_int1_int1(arg3, 0);
    } else {
      tmp52 = false;
    } // endif
  } else {
    tmp52 = false;
  } // endif
  if(tmp52) {
    tmp56 = ats2jspre_mtrxszref_get_at(arg0, arg2, arg3);
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab4
        if(ATSCKptriscons(tmp56)) { tmplab_js = 4; break; }
        case 2: // __atstmplab5
        tmp59 = [1];
        ats2jspre_mtrxszref_set_at(arg1, arg2, arg3, tmp59);
        tmp61 = [3];
        ats2jspre_mtrxszref_set_at(arg0, arg2, arg3, tmp61);
        tmpret51 = 0;
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab6
        case 4: // __atstmplab7
        tmp57 = tmp56[0];
        tmp62 = ats2jspre_eq_int0_int0(tmp57, 1);
        if(tmp62) {
          tmp64 = [2];
          ats2jspre_mtrxszref_set_at(arg0, arg2, arg3, tmp64);
          tmp66 = [2];
          ats2jspre_mtrxszref_set_at(arg1, arg2, arg3, tmp66);
          tmpret51 = 1;
        } else {
          tmpret51 = 0;
        } // endif
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
  } else {
    ats2jspre_alert("Your inputs need to be inside the grid!");
    tmpret51 = 2;
  } // endif
  return tmpret51;
} // end-of-function


function
defNode2string(arg0)
{
//
// knd = 0
  var tmpret68
  var tmp69
  var tmplab, tmplab_js
//
  // __patsflab_defNode2string
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab8
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab9
      tmpret68 = "O";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab10
      case 4: // __atstmplab11
      tmp69 = arg0[0];
      // ATScaseofseq_beg
      tmplab_js = 1;
      while(true) {
        tmplab = tmplab_js; tmplab_js = 0;
        switch(tmplab) {
          // ATSbranchseq_beg
          case 1: // __atstmplab12
          if(!ATSCKpat_int(tmp69, 1)) { tmplab_js = 3; break; }
          case 2: // __atstmplab13
          tmpret68 = "S";
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 3: // __atstmplab14
          if(!ATSCKpat_int(tmp69, 2)) { tmplab_js = 5; break; }
          case 4: // __atstmplab15
          tmpret68 = "D";
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 5: // __atstmplab16
          if(!ATSCKpat_int(tmp69, 3)) { tmplab_js = 7; break; }
          case 6: // __atstmplab17
          tmpret68 = "-";
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 7: // __atstmplab18
          tmpret68 = ats2jspre_String(tmp69);
          break;
          // ATSbranchseq_end
        } // end-of-switch
        if (tmplab_js === 0) break;
      } // endwhile
      // ATScaseofseq_end
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret68;
} // end-of-function


function
attNode2string(arg0)
{
//
// knd = 0
  var tmpret70
  var tmp71
  var tmplab, tmplab_js
//
  // __patsflab_attNode2string
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab19
      if(ATSCKptriscons(arg0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab20
      tmpret70 = "?";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab21
      case 4: // __atstmplab22
      tmp71 = arg0[0];
      // ATScaseofseq_beg
      tmplab_js = 1;
      while(true) {
        tmplab = tmplab_js; tmplab_js = 0;
        switch(tmplab) {
          // ATSbranchseq_beg
          case 1: // __atstmplab23
          if(!ATSCKpat_int(tmp71, 1)) { tmplab_js = 3; break; }
          case 2: // __atstmplab24
          tmpret70 = "X";
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 3: // __atstmplab25
          if(!ATSCKpat_int(tmp71, 2)) { tmplab_js = 5; break; }
          case 4: // __atstmplab26
          tmpret70 = "D";
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 5: // __atstmplab27
          tmpret70 = ats2jspre_String(tmp71);
          break;
          // ATSbranchseq_end
        } // end-of-switch
        if (tmplab_js === 0) break;
      } // endwhile
      // ATScaseofseq_end
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret70;
} // end-of-function


function
boards2show(arg0)
{
//
// knd = 0
  var tmpret72
  var tmp73
  var tmp74
  var tmp75
  var tmp76
  var tmplab, tmplab_js
//
  // __patsflab_boards2show
  tmp73 = arg0[0];
  tmp74 = arg0[1];
  tmp75 = ats2jspre_mtrxszref_make_elt(8, 8, "");
  tmp76 = ats2jspre_mtrxszref_make_elt(8, 8, "");
  ats2jspre_mtrxszref_foreach_cloref(tmp73, Battleship__patsfun_15__closurerize(tmp73, tmp75));
  ats2jspre_mtrxszref_foreach_cloref(tmp74, Battleship__patsfun_16__closurerize(tmp74, tmp76));
  tmpret72 = [tmp75, tmp76];
  return tmpret72;
} // end-of-function


function
Battleship__patsfun_15(env0, env1, arg0, arg1)
{
//
// knd = 0
  var tmp79
  var tmp80
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_15
  tmp80 = ats2jspre_mtrxszref_get_at(env0, arg0, arg1);
  tmp79 = defNode2string(tmp80);
  ats2jspre_mtrxszref_set_at(env1, arg0, arg1, tmp79);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_16(env0, env1, arg0, arg1)
{
//
// knd = 0
  var tmp83
  var tmp84
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_16
  tmp84 = ats2jspre_mtrxszref_get_at(env0, arg0, arg1);
  tmp83 = attNode2string(tmp84);
  ats2jspre_mtrxszref_set_at(env1, arg0, arg1, tmp83);
  return/*_void*/;
} // end-of-function


function
printBoards(arg0, arg1)
{
//
// knd = 0
  var tmp92
  var tmp97
  var tmp109
  var tmp115
  var tmp125
  var tmp130
  var tmp142
  var tmp147
  var tmplab, tmplab_js
//
  // __patsflab_printBoards
  ats2jspre_print_string("Player");
  ats2jspre_print_newline();
  ats2jspre_print_newline();
  ats2jspre_print_string(" ");
  ats2jspre_print_string("+");
  tmp92 = ats2jspre_int_foreach_method(8);
  tmp92[0](tmp92, Battleship__patsfun_18__closurerize("+"));
  ats2jspre_print_string("+");
  ats2jspre_print_newline();
  tmp97 = ats2jspre_int_foreach_method(8);
  tmp97[0](tmp97, Battleship__patsfun_19__closurerize(arg0, "+", 8));
  ats2jspre_print_string(" ");
  ats2jspre_print_string("+");
  tmp109 = ats2jspre_int_foreach_method(8);
  tmp109[0](tmp109, Battleship__patsfun_21__closurerize("+"));
  ats2jspre_print_string("+");
  ats2jspre_print_newline();
  ats2jspre_print_string(" ");
  tmp115 = ats2jspre_int_foreach_method(8);
  tmp115[0](tmp115, Battleship__patsfun_22__closurerize());
  ats2jspre_print_newline();
  ats2jspre_print_newline();
  ats2jspre_print_string("CPU");
  ats2jspre_print_newline();
  ats2jspre_print_newline();
  ats2jspre_print_string(" ");
  ats2jspre_print_string("+");
  tmp125 = ats2jspre_int_foreach_method(8);
  tmp125[0](tmp125, Battleship__patsfun_23__closurerize("+"));
  ats2jspre_print_string("+");
  ats2jspre_print_newline();
  tmp130 = ats2jspre_int_foreach_method(8);
  tmp130[0](tmp130, Battleship__patsfun_24__closurerize(arg1, "+", 8));
  ats2jspre_print_string(" ");
  ats2jspre_print_string("+");
  tmp142 = ats2jspre_int_foreach_method(8);
  tmp142[0](tmp142, Battleship__patsfun_26__closurerize("+"));
  ats2jspre_print_string("+");
  ats2jspre_print_newline();
  ats2jspre_print_string(" ");
  tmp147 = ats2jspre_int_foreach_method(8);
  tmp147[0](tmp147, Battleship__patsfun_27__closurerize());
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_18(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_18
  ats2jspre_print_string(env0);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_19(env0, env1, env2, arg0)
{
//
// knd = 0
  var tmp102
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_19
  ats2jspre_print_int(arg0);
  ats2jspre_print_string(env1);
  tmp102 = ats2jspre_int_foreach_method(env2);
  tmp102[0](tmp102, Battleship__patsfun_20__closurerize(env0, arg0));
  ats2jspre_print_string(env1);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_20(env0, env1, arg0)
{
//
// knd = 0
  var tmp104
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_20
  tmp104 = ats2jspre_mtrxszref_get_at(env0, env1, arg0);
  ats2jspre_print_string(tmp104);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_21(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_21
  ats2jspre_print_string(env0);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_22(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_22
  ats2jspre_print_int(arg0);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_23(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_23
  ats2jspre_print_string(env0);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_24(env0, env1, env2, arg0)
{
//
// knd = 0
  var tmp135
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_24
  ats2jspre_print_int(arg0);
  ats2jspre_print_string(env1);
  tmp135 = ats2jspre_int_foreach_method(env2);
  tmp135[0](tmp135, Battleship__patsfun_25__closurerize(env0, arg0));
  ats2jspre_print_string(env1);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_25(env0, env1, arg0)
{
//
// knd = 0
  var tmp137
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_25
  tmp137 = ats2jspre_mtrxszref_get_at(env0, env1, arg0);
  ats2jspre_print_string(tmp137);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_26(env0, arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_26
  ats2jspre_print_string(env0);
  return/*_void*/;
} // end-of-function


function
Battleship__patsfun_27(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_Battleship__patsfun_27
  ats2jspre_print_int(arg0);
  return/*_void*/;
} // end-of-function


function
printScores(arg0, arg1)
{
//
// knd = 0
  var tmp158
  var tmp159
  var tmplab, tmplab_js
//
  // __patsflab_printScores
  ats2jspre_print_newline();
  ats2jspre_print_newline();
  ats2jspre_print_newline();
  ats2jspre_print_string("Your score: ");
  ats2jspre_print_int(arg0);
  ats2jspre_print_newline();
  ats2jspre_print_string("CPU score: ");
  ats2jspre_print_int(arg1);
  tmp158 = ats2jspre_eq_int1_int1(arg0, 10);
  if(tmp158) {
    ats2jspre_alert("You won!");
  } else {
    tmp159 = ats2jspre_eq_int1_int1(arg1, 10);
    if(tmp159) {
      ats2jspre_alert("You Lost!");
    } else {
      // ATSINSmove_void
    } // endif
  } // endif
  return/*_void*/;
} // end-of-function


function
printResults(arg0, arg1)
{
//
// knd = 0
  var tmp161
  var tmp162
  var tmp165
  var tmp168
  var tmplab, tmplab_js
//
  // __patsflab_printResults
  tmp162 = ats2jspre_eq_int1_int1(arg0, 1);
  if(tmp162) {
    tmp161 = ats2jspre_eq_int1_int1(arg1, 1);
  } else {
    tmp161 = false;
  } // endif
  if(tmp161) {
    ats2jspre_print_string("You sunk one of his ships and he sunk one of your ships!");
    ats2jspre_print_newline();
    ats2jspre_print_newline();
  } else {
    tmp165 = ats2jspre_eq_int1_int1(arg0, 1);
    if(tmp165) {
      ats2jspre_print_string("You sunk one of his ships and he missed!");
      ats2jspre_print_newline();
      ats2jspre_print_newline();
    } else {
      tmp168 = ats2jspre_eq_int1_int1(arg1, 1);
      if(tmp168) {
        ats2jspre_print_string("You missed and he sunk one of your ships!");
        ats2jspre_print_newline();
        ats2jspre_print_newline();
      } else {
        ats2jspre_print_string("You both missed!");
        ats2jspre_print_newline();
        ats2jspre_print_newline();
      } // endif
    } // endif
  } // endif
  return/*_void*/;
} // end-of-function


function
checkBefore(arg0, arg1, arg2)
{
//
// knd = 1
  var apy0
  var apy1
  var apy2
  var tmpret173
  var tmp174
  var tmp175
  var tmp176
  var tmp177
  var tmp178
  var tmp179
  var tmp180
  var tmp181
  var tmp182
  var tmp183
  var funlab_js
  var tmplab, tmplab_js
//
  while(true) {
    funlab_js = 0;
    // __patsflab_checkBefore
    tmp174 = arg0[1];
    tmp175 = ats2jspre_mtrxszref_get_at(tmp174, arg1, arg2);
    // ATScaseofseq_beg
    tmplab_js = 1;
    while(true) {
      tmplab = tmplab_js; tmplab_js = 0;
      switch(tmplab) {
        // ATSbranchseq_beg
        case 1: // __atstmplab28
        if(ATSCKptriscons(tmp175)) { tmplab_js = 4; break; }
        case 2: // __atstmplab29
        tmpret173 = [arg1, arg2];
        break;
        // ATSbranchseq_end
        // ATSbranchseq_beg
        case 3: // __atstmplab30
        case 4: // __atstmplab31
        tmp179 = ats2jspre_JSmath_random();
        tmp178 = ats2jspre_mul_double_double(tmp179, 0.999999);
        tmp177 = ats2jspre_mul_double_int(tmp178, 8);
        tmp176 = ats2jspre_double2int(tmp177);
        tmp183 = ats2jspre_JSmath_random();
        tmp182 = ats2jspre_mul_double_double(tmp183, 0.999999);
        tmp181 = ats2jspre_mul_double_int(tmp182, 8);
        tmp180 = ats2jspre_double2int(tmp181);
        // ATStailcalseq_beg
        apy0 = arg0;
        apy1 = tmp176;
        apy2 = tmp180;
        arg0 = apy0;
        arg1 = apy1;
        arg2 = apy2;
        funlab_js = 1; // __patsflab_checkBefore
        // ATStailcalseq_end
        break;
        // ATSbranchseq_end
      } // end-of-switch
      if (tmplab_js === 0) break;
    } // endwhile
    // ATScaseofseq_end
    if (funlab_js > 0) continue; else return tmpret173;
  } // endwhile-fun
} // end-of-function

// dynloadflag_minit
var _057_Users_057_jgrishey_057_Workspace_057_cs520_055_2016_055_fall_055_jgrishey_057_Project_057_Battleship_play_056_dats__dynloadflag = 0;

function
_057_Users_057_jgrishey_057_Workspace_057_cs520_055_2016_055_fall_055_jgrishey_057_Project_057_Battleship_play_056_dats__dynload()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // ATSdynload()
  // ATSdynloadflag_sta(_057_Users_057_jgrishey_057_Workspace_057_cs520_055_2016_055_fall_055_jgrishey_057_Project_057_Battleship_play_056_dats__dynloadflag(339))
  if(ATSCKiseqz(_057_Users_057_jgrishey_057_Workspace_057_cs520_055_2016_055_fall_055_jgrishey_057_Project_057_Battleship_play_056_dats__dynloadflag)) {
    _057_Users_057_jgrishey_057_Workspace_057_cs520_055_2016_055_fall_055_jgrishey_057_Project_057_Battleship_play_056_dats__dynloadflag = 1 ; // flag is set
  } // endif
  return/*_void*/;
} // end-of-function


function
Battleship__dynload()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  _057_Users_057_jgrishey_057_Workspace_057_cs520_055_2016_055_fall_055_jgrishey_057_Project_057_Battleship_play_056_dats__dynload();
  return/*_void*/;
} // end-of-function


/* ATSextcode_beg() */
//
function
thePrintbd_display()
{
//
var human = player_human_init();
var cpu = player_cpu_init();
//
ownBoard_addShips(human, generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip())
ownBoard_addShips(cpu, generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip(), generate_randShip())
//
var [s1, s2] = boards2show(human);
//
ats2jspre_the_print_store_clear();
//
printBoards(s1, s2);
//
document.getElementById("theBattleship_printbd").innerHTML = ats2jspre_the_print_store_join();
//
return [human, cpu];
//
} /* end of [thePrintbd_display] */
//
/* ATSextcode_end() */

/* ATSextcode_beg() */
//
function
Battleship_initize()
{
//
var ret = thePrintbd_display();
//
return [ret[0], ret[1]]; // from [Battleship_initize]
//
} // end of [Battleship_initize]
/* ATSextcode_end() */

/* ATSextcode_beg() */
var hits = 0;
var hitsTaken = 0;
/* ATSextcode_end() */

/* ATSextcode_beg() */
//
jQuery(document).ready(function(){
Battleship__dynload();
var players = Battleship_initize();
document.getElementById("attack_btn").onclick = function () {
    var x = parseInt(document.getElementById("attackx").value);
    var y = parseInt(document.getElementById("attacky").value);
    var res = attack(players[0], players[1], x, y);

    if (res != 2) {
        var xtry = ats2jspre_double2int(Math.random()*0.999999*8);
        var ytry = ats2jspre_double2int(Math.random()*0.999999*8);
        var [cpux, cpuy] = checkBefore(players[1], xtry, ytry);
        var res2 = attack(players[1], players[0], cpux, cpuy);
        ats2jspre_the_print_store_clear();
        hits = hits + res;
        hitsTaken = hitsTaken + res2;
        printResults(res, res2);
        var [s1, s2] = boards2show(players[0]);
        printBoards(s1, s2);
        printScores(hits, hitsTaken);
        document.getElementById("theBattleship_printbd").innerHTML = ats2jspre_the_print_store_join();
    }
};
});
//
/* ATSextcode_end() */

/* ****** ****** */

/* end-of-compilation-unit */
